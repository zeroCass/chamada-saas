Criar tabelas:
- Usuario (id, nome, matricula, email, senha, tipo_usuario)
- Turmas (id, nome, horario, senha, semestre, professor_id, token_presenca)
- Matricula (estudante_id, turma_id)
- Presenca (id, data, matricula_estudante, turma_id)

Funcionaldiades:
- Registrar:
	* (Usuario deve se registrar informando sua matricula, nome, etc. O email sera automaticamente preenchido quando o usuario
	informar a matricula. Uma consulta usando uma API sera feita para ver se o email (institucional) é valido. Se for valido o 
	registro será concluido)
- Logar:
	* (O usuario deve ser capaz de se logar usando suas credenciais (matricula e senha))
	
- Criar Turma:
	* (Apenas o professor deve ser capaz de criar turmas, informando as informacoes necessárias)
- Entrar em Turma:
	* (Estudantes devem ser capazes de entrar em turmas, informando as senha. Para isso, deve haver um meio de pesquisar turmas
	pelo seu nome por exemplo)
- Gerar QRCODE:
	* (O professor deve ser capaz de gerar QRCODE para uma aula especifica em uma turma. Por exemplo, se a aula for Terca das 8am ate as 10am,
	um QRCODE unico sera gerado junto de um token unico que sera armazenado em token_presenca na tabela TURMA)
	
- Assinar Presenca
	* (O aluno será capaz de scanear o codigo que o professor gerou. Um link desse QRCODE é disponilizado e ele assina a chamada usando
	esse link)
	

disclaimer: basicamente não é trivial garantir que o usuario que ira assinar a chamada está na aula de fato.
Usando formas de verificar a geolocalização pode ser burlavel com vpn
Não é possivel verificar se o usuario está conectado ao wifi da universidade usando recursos da web, não que eu tenha conhecimento. Para isso, é necessario
a criação de um aplicativo movel, usando linguagens nativas. Talvez framewroks como o react native possibilite acessar informacoes do sistema que informe o BSSID do wifi do usuairo
A geração de qrcodes a cada x segundos pode ser computacionalmente caro e mesmo assim pode não impedir o usuario de tirar foto do qrcode e enviar para outro



To ensure the security of the system and prevent potential cheats, you can implement the following measures:

1. User Authentication: Implement a secure user authentication system where each user (Professor and Aluno) has their own account with a unique username and password. This will ensure that only authorized users can access the system.

2. Access Control: Implement proper access control mechanisms to restrict access to certain functionalities based on user roles. Only Professors should have the ability to create classes, generate unique QR codes, and manage class attendance. Alunos should only have access to join classes and sign their own attendance.

3. Time and Location Verification: To prevent students from signing attendance when they are not physically present in the classroom, you can incorporate time and location verification. For example, you can use the GPS capabilities of students' mobile devices to verify their physical presence within a certain radius of the classroom at the time of attendance. This can be done by comparing the GPS coordinates of the student's device with the known location of the classroom.

4. QR Code Validation: Implement QR code validation to ensure that only valid QR codes generated by the system are accepted for attendance signing. Each QR code should be unique and tied to a specific class session. Additionally, you can include a time-based expiration for QR codes to prevent reuse or sharing of old QR codes.

5. Device Binding: Bind the QR code scanning functionality to the specific device of the student. This can be achieved by associating the device's unique identifier (e.g., device ID or IMEI) with the student's account during the first scan. Subsequent scans must be performed on the same device to validate the attendance.

6. Logging and Auditing: Implement logging and auditing mechanisms to keep track of user activities, including attendance signing and QR code generation. This can help in identifying any suspicious or unauthorized activities within the system.

7. Encourage Reporting: Educate users about the importance of maintaining the integrity of the attendance system and encourage them to report any potential breaches or suspicious activities they come across.

It is important to note that while these measures can enhance the security of the system, no system is completely foolproof. It's always recommended to regularly review and update the security measures based on the evolving threat landscape and best practices in software security.






You're correct that relying solely on GPS coordinates for verifying physical presence in a specific location may not be foolproof, as GPS spoofing tools or VPNs can potentially be used to manipulate the location data. It's important to consider alternative solutions or additional measures to enhance the security and accuracy of attendance verification. Here are a few alternative options:

1. Wi-Fi Network Verification: Instead of relying solely on GPS coordinates, you can leverage Wi-Fi network information. Each university typically has a unique Wi-Fi network, and students can connect to it when they are physically present on campus. You can check if the student's device is connected to the university's authorized Wi-Fi network to verify their presence.

2. Beacon Technology: Implement beacon technology in the classrooms or specific areas where attendance is taken. Beacons are small devices that emit Bluetooth signals. By placing beacons in the classroom, you can ensure that the student's device detects the beacon's signal when they are in proximity, confirming their presence.

3. QR Code with Time Validation: Generate QR codes that are valid only for a specific time window, such as a few minutes before the class starts and a few minutes after it ends. This way, the QR code becomes valid only during the actual class session, reducing the chances of misuse.

4. Randomized QR Codes: Instead of using a static QR code for each class session, generate randomized QR codes that change dynamically for every class. This prevents sharing of QR codes between students and makes it harder for unauthorized access.

5. Two-Factor Authentication (2FA): Implement a two-factor authentication mechanism for students to sign their attendance. Along with scanning the QR code, students can be required to provide an additional authentication factor, such as a one-time password (OTP) sent to their registered email or phone number.

6. Photo Confirmation: Prompt students to take a photo of themselves within the application at the time of attendance signing. This photo can be compared with their profile picture or verified manually by the professor to ensure the student's presence.

By combining multiple verification methods and incorporating additional security measures, you can strengthen the integrity of the attendance system and reduce the risk of potential cheats or unauthorized access. It's important to strike a balance between security and usability, considering the specific requirements and constraints of your university environment.




Implementing a dynamic QR code that changes every 30 seconds can be a good security measure to prevent unauthorized access. However, it's important to consider the potential impact on the performance of the site.

Generating a new QR code every 30 seconds will require server-side processing to generate and serve the updated QR code to the user. This additional processing may introduce some overhead, depending on the complexity of generating and updating the QR code. However, with proper optimization and efficient implementation, the impact on performance can be minimized.

Here are a few suggestions to mitigate any potential performance impact:

1. Caching: Implement caching mechanisms to store the generated QR codes for a short duration, such as a few seconds. This allows the server to serve the cached QR code for subsequent requests within that time frame, reducing the need for frequent generation.

2. Asynchronous Processing: Generate the QR codes asynchronously in the background, separate from the main request-handling flow. This way, the generation process won't block the responsiveness of the site, and previously generated QR codes can still be served while the new one is being generated.

3. QR Code Generation Optimization: Optimize the QR code generation process itself by using efficient libraries or algorithms. Make sure to benchmark and profile the code to identify any potential performance bottlenecks and optimize them accordingly.

By considering these optimizations and properly testing the performance of the QR code generation process, you can ensure that the impact on the site's performance is minimal while still maintaining the desired security level.